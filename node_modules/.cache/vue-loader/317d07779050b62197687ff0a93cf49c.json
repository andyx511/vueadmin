{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\views\\dashboard\\admin\\components\\TodoList\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\views\\dashboard\\admin\\components\\TodoList\\index.vue","mtime":1566914132288},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Todo from './Todo.vue'\r\n\r\nconst STORAGE_KEY = 'todos'\r\nconst filters = {\r\n  all: todos => todos,\r\n  active: todos => todos.filter(todo => !todo.done),\r\n  completed: todos => todos.filter(todo => todo.done)\r\n}\r\nconst defalutList = [\r\n  { text: 'star this repository', done: false },\r\n  { text: 'fork this repository', done: false },\r\n  { text: 'follow author', done: false },\r\n  { text: 'vue-element-admin', done: true },\r\n  { text: 'vue', done: true },\r\n  { text: 'element-ui', done: true },\r\n  { text: 'axios', done: true },\r\n  { text: 'webpack', done: true }\r\n]\r\nexport default {\r\n  components: { Todo },\r\n  filters: {\r\n    pluralize: (n, w) => n === 1 ? w : w + 's',\r\n    capitalize: s => s.charAt(0).toUpperCase() + s.slice(1)\r\n  },\r\n  data() {\r\n    return {\r\n      visibility: 'all',\r\n      filters,\r\n      // todos: JSON.parse(window.localStorage.getItem(STORAGE_KEY)) || defalutList\r\n      todos: defalutList\r\n    }\r\n  },\r\n  computed: {\r\n    allChecked() {\r\n      return this.todos.every(todo => todo.done)\r\n    },\r\n    filteredTodos() {\r\n      return filters[this.visibility](this.todos)\r\n    },\r\n    remaining() {\r\n      return this.todos.filter(todo => !todo.done).length\r\n    }\r\n  },\r\n  methods: {\r\n    setLocalStorage() {\r\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(this.todos))\r\n    },\r\n    addTodo(e) {\r\n      const text = e.target.value\r\n      if (text.trim()) {\r\n        this.todos.push({\r\n          text,\r\n          done: false\r\n        })\r\n        this.setLocalStorage()\r\n      }\r\n      e.target.value = ''\r\n    },\r\n    toggleTodo(val) {\r\n      val.done = !val.done\r\n      this.setLocalStorage()\r\n    },\r\n    deleteTodo(todo) {\r\n      this.todos.splice(this.todos.indexOf(todo), 1)\r\n      this.setLocalStorage()\r\n    },\r\n    editTodo({ todo, value }) {\r\n      todo.text = value\r\n      this.setLocalStorage()\r\n    },\r\n    clearCompleted() {\r\n      this.todos = this.todos.filter(todo => !todo.done)\r\n      this.setLocalStorage()\r\n    },\r\n    toggleAll({ done }) {\r\n      this.todos.forEach(todo => {\r\n        todo.done = done\r\n        this.setLocalStorage()\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}