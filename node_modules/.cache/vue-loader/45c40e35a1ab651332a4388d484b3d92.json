{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\components\\MDinput\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\components\\MDinput\\index.vue","mtime":1566914132165},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// source:https://github.com/wemake-services/vue-material-input/blob/master/src/components/MaterialInput.vue\r\n\r\nexport default {\r\n  name: 'MdInput',\r\n  props: {\r\n    /* eslint-disable */\r\n    icon: String,\r\n    name: String,\r\n    type: {\r\n      type: String,\r\n      default: 'text'\r\n    },\r\n    value: [String, Number],\r\n    placeholder: String,\r\n    readonly: Boolean,\r\n    disabled: Boolean,\r\n    min: String,\r\n    max: String,\r\n    step: String,\r\n    minlength: Number,\r\n    maxlength: Number,\r\n    required: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    autoComplete: {\r\n      type: String,\r\n      default: 'off'\r\n    },\r\n    validateEvent: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currentValue: this.value,\r\n      focus: false,\r\n      fillPlaceHolder: null\r\n    }\r\n  },\r\n  computed: {\r\n    computedClasses() {\r\n      return {\r\n        'material--active': this.focus,\r\n        'material--disabled': this.disabled,\r\n        'material--raised': Boolean(this.focus || this.currentValue) // has value\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    value(newValue) {\r\n      this.currentValue = newValue\r\n    }\r\n  },\r\n  methods: {\r\n    handleModelInput(event) {\r\n      const value = event.target.value\r\n      this.$emit('input', value)\r\n      if (this.$parent.$options.componentName === 'ElFormItem') {\r\n        if (this.validateEvent) {\r\n          this.$parent.$emit('el.form.change', [value])\r\n        }\r\n      }\r\n      this.$emit('change', value)\r\n    },\r\n    handleMdFocus(event) {\r\n      this.focus = true\r\n      this.$emit('focus', event)\r\n      if (this.placeholder && this.placeholder !== '') {\r\n        this.fillPlaceHolder = this.placeholder\r\n      }\r\n    },\r\n    handleMdBlur(event) {\r\n      this.focus = false\r\n      this.$emit('blur', event)\r\n      this.fillPlaceHolder = null\r\n      if (this.$parent.$options.componentName === 'ElFormItem') {\r\n        if (this.validateEvent) {\r\n          this.$parent.$emit('el.form.blur', [this.currentValue])\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}