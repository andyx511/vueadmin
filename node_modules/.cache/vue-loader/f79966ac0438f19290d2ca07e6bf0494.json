{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\views\\table\\complex-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\views\\table\\complex-table.vue","mtime":1566914132336},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { fetchList, fetchPv, createArticle, updateArticle } from '@/api/article'\r\nimport waves from '@/directive/waves' // waves directive\r\nimport { parseTime } from '@/utils'\r\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\r\n\r\nconst calendarTypeOptions = [\r\n  { key: 'CN', display_name: 'China' },\r\n  { key: 'US', display_name: 'USA' },\r\n  { key: 'JP', display_name: 'Japan' },\r\n  { key: 'EU', display_name: 'Eurozone' }\r\n]\r\n\r\n// arr to obj, such as { CN : \"China\", US : \"USA\" }\r\nconst calendarTypeKeyValue = calendarTypeOptions.reduce((acc, cur) => {\r\n  acc[cur.key] = cur.display_name\r\n  return acc\r\n}, {})\r\n\r\nexport default {\r\n  name: 'ComplexTable',\r\n  components: { Pagination },\r\n  directives: { waves },\r\n  filters: {\r\n    statusFilter(status) {\r\n      const statusMap = {\r\n        published: 'success',\r\n        draft: 'info',\r\n        deleted: 'danger'\r\n      }\r\n      return statusMap[status]\r\n    },\r\n    typeFilter(type) {\r\n      return calendarTypeKeyValue[type]\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      tableKey: 0,\r\n      list: null,\r\n      total: 0,\r\n      listLoading: true,\r\n      listQuery: {\r\n        page: 1,\r\n        limit: 20,\r\n        importance: undefined,\r\n        title: undefined,\r\n        type: undefined,\r\n        sort: '+id'\r\n      },\r\n      importanceOptions: [1, 2, 3],\r\n      calendarTypeOptions,\r\n      sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],\r\n      statusOptions: ['published', 'draft', 'deleted'],\r\n      showReviewer: false,\r\n      temp: {\r\n        id: undefined,\r\n        importance: 1,\r\n        remark: '',\r\n        timestamp: new Date(),\r\n        title: '',\r\n        type: '',\r\n        status: 'published'\r\n      },\r\n      dialogFormVisible: false,\r\n      dialogStatus: '',\r\n      textMap: {\r\n        update: 'Edit',\r\n        create: 'Create'\r\n      },\r\n      dialogPvVisible: false,\r\n      pvData: [],\r\n      rules: {\r\n        type: [{ required: true, message: 'type is required', trigger: 'change' }],\r\n        timestamp: [{ type: 'date', required: true, message: 'timestamp is required', trigger: 'change' }],\r\n        title: [{ required: true, message: 'title is required', trigger: 'blur' }]\r\n      },\r\n      downloadLoading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    getList() {\r\n      this.listLoading = true\r\n      fetchList(this.listQuery).then(response => {\r\n        this.list = response.data.items\r\n        this.total = response.data.total\r\n\r\n        // Just to simulate the time of the request\r\n        setTimeout(() => {\r\n          this.listLoading = false\r\n        }, 1.5 * 1000)\r\n      })\r\n    },\r\n    handleFilter() {\r\n      this.listQuery.page = 1\r\n      this.getList()\r\n    },\r\n    handleModifyStatus(row, status) {\r\n      this.$message({\r\n        message: '操作Success',\r\n        type: 'success'\r\n      })\r\n      row.status = status\r\n    },\r\n    sortChange(data) {\r\n      const { prop, order } = data\r\n      if (prop === 'id') {\r\n        this.sortByID(order)\r\n      }\r\n    },\r\n    sortByID(order) {\r\n      if (order === 'ascending') {\r\n        this.listQuery.sort = '+id'\r\n      } else {\r\n        this.listQuery.sort = '-id'\r\n      }\r\n      this.handleFilter()\r\n    },\r\n    resetTemp() {\r\n      this.temp = {\r\n        id: undefined,\r\n        importance: 1,\r\n        remark: '',\r\n        timestamp: new Date(),\r\n        title: '',\r\n        status: 'published',\r\n        type: ''\r\n      }\r\n    },\r\n    handleCreate() {\r\n      this.resetTemp()\r\n      this.dialogStatus = 'create'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    createData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          this.temp.id = parseInt(Math.random() * 100) + 1024 // mock a id\r\n          this.temp.author = 'vue-element-admin'\r\n          createArticle(this.temp).then(() => {\r\n            this.list.unshift(this.temp)\r\n            this.dialogFormVisible = false\r\n            this.$notify({\r\n              title: 'Success',\r\n              message: 'Created Successfully',\r\n              type: 'success',\r\n              duration: 2000\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleUpdate(row) {\r\n      this.temp = Object.assign({}, row) // copy obj\r\n      this.temp.timestamp = new Date(this.temp.timestamp)\r\n      this.dialogStatus = 'update'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    updateData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          const tempData = Object.assign({}, this.temp)\r\n          tempData.timestamp = +new Date(tempData.timestamp) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464\r\n          updateArticle(tempData).then(() => {\r\n            for (const v of this.list) {\r\n              if (v.id === this.temp.id) {\r\n                const index = this.list.indexOf(v)\r\n                this.list.splice(index, 1, this.temp)\r\n                break\r\n              }\r\n            }\r\n            this.dialogFormVisible = false\r\n            this.$notify({\r\n              title: 'Success',\r\n              message: 'Update Successfully',\r\n              type: 'success',\r\n              duration: 2000\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleDelete(row) {\r\n      this.$notify({\r\n        title: 'Success',\r\n        message: 'Delete Successfully',\r\n        type: 'success',\r\n        duration: 2000\r\n      })\r\n      const index = this.list.indexOf(row)\r\n      this.list.splice(index, 1)\r\n    },\r\n    handleFetchPv(pv) {\r\n      fetchPv(pv).then(response => {\r\n        this.pvData = response.data.pvData\r\n        this.dialogPvVisible = true\r\n      })\r\n    },\r\n    handleDownload() {\r\n      this.downloadLoading = true\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const tHeader = ['timestamp', 'title', 'type', 'importance', 'status']\r\n        const filterVal = ['timestamp', 'title', 'type', 'importance', 'status']\r\n        const data = this.formatJson(filterVal, this.list)\r\n        excel.export_json_to_excel({\r\n          header: tHeader,\r\n          data,\r\n          filename: 'table-list'\r\n        })\r\n        this.downloadLoading = false\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        if (j === 'timestamp') {\r\n          return parseTime(v[j])\r\n        } else {\r\n          return v[j]\r\n        }\r\n      }))\r\n    },\r\n    getSortClass: function(key) {\r\n      const sort = this.listQuery.sort\r\n      return sort === `+${key}`\r\n        ? 'ascending'\r\n        : sort === `-${key}`\r\n          ? 'descending'\r\n          : ''\r\n    }\r\n  }\r\n}\r\n",null]}