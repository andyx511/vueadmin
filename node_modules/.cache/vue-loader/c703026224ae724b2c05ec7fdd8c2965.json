{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\views\\permission\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\views\\permission\\role.vue","mtime":1566914132328},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport path from 'path'\r\nimport { deepClone } from '@/utils'\r\nimport { getRoutes, getRoles, addRole, deleteRole, updateRole } from '@/api/role'\r\n\r\nconst defaultRole = {\r\n  key: '',\r\n  name: '',\r\n  description: '',\r\n  routes: []\r\n}\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      role: Object.assign({}, defaultRole),\r\n      routes: [],\r\n      rolesList: [],\r\n      dialogVisible: false,\r\n      dialogType: 'new',\r\n      checkStrictly: false,\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'title'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    routesData() {\r\n      return this.routes\r\n    }\r\n  },\r\n  created() {\r\n    // Mock: get all routes and roles list from server\r\n    this.getRoutes()\r\n    this.getRoles()\r\n  },\r\n  methods: {\r\n    async getRoutes() {\r\n      const res = await getRoutes()\r\n      this.serviceRoutes = res.data\r\n      this.routes = this.generateRoutes(res.data)\r\n    },\r\n    async getRoles() {\r\n      const res = await getRoles()\r\n      this.rolesList = res.data\r\n    },\r\n\r\n    // Reshape the routes structure so that it looks the same as the sidebar\r\n    generateRoutes(routes, basePath = '/') {\r\n      const res = []\r\n\r\n      for (let route of routes) {\r\n        // skip some route\r\n        if (route.hidden) { continue }\r\n\r\n        const onlyOneShowingChild = this.onlyOneShowingChild(route.children, route)\r\n\r\n        if (route.children && onlyOneShowingChild && !route.alwaysShow) {\r\n          route = onlyOneShowingChild\r\n        }\r\n\r\n        const data = {\r\n          path: path.resolve(basePath, route.path),\r\n          title: route.meta && route.meta.title\r\n\r\n        }\r\n\r\n        // recursive child routes\r\n        if (route.children) {\r\n          data.children = this.generateRoutes(route.children, data.path)\r\n        }\r\n        res.push(data)\r\n      }\r\n      return res\r\n    },\r\n    generateArr(routes) {\r\n      let data = []\r\n      routes.forEach(route => {\r\n        data.push(route)\r\n        if (route.children) {\r\n          const temp = this.generateArr(route.children)\r\n          if (temp.length > 0) {\r\n            data = [...data, ...temp]\r\n          }\r\n        }\r\n      })\r\n      return data\r\n    },\r\n    handleAddRole() {\r\n      this.role = Object.assign({}, defaultRole)\r\n      if (this.$refs.tree) {\r\n        this.$refs.tree.setCheckedNodes([])\r\n      }\r\n      this.dialogType = 'new'\r\n      this.dialogVisible = true\r\n    },\r\n    handleEdit(scope) {\r\n      this.dialogType = 'edit'\r\n      this.dialogVisible = true\r\n      this.checkStrictly = true\r\n      this.role = deepClone(scope.row)\r\n      this.$nextTick(() => {\r\n        const routes = this.generateRoutes(this.role.routes)\r\n        this.$refs.tree.setCheckedNodes(this.generateArr(routes))\r\n        // set checked state of a node not affects its father and child nodes\r\n        this.checkStrictly = false\r\n      })\r\n    },\r\n    handleDelete({ $index, row }) {\r\n      this.$confirm('Confirm to remove the role?', 'Warning', {\r\n        confirmButtonText: 'Confirm',\r\n        cancelButtonText: 'Cancel',\r\n        type: 'warning'\r\n      })\r\n        .then(async() => {\r\n          await deleteRole(row.key)\r\n          this.rolesList.splice($index, 1)\r\n          this.$message({\r\n            type: 'success',\r\n            message: 'Delete succed!'\r\n          })\r\n        })\r\n        .catch(err => { console.error(err) })\r\n    },\r\n    generateTree(routes, basePath = '/', checkedKeys) {\r\n      const res = []\r\n\r\n      for (const route of routes) {\r\n        const routePath = path.resolve(basePath, route.path)\r\n\r\n        // recursive child routes\r\n        if (route.children) {\r\n          route.children = this.generateTree(route.children, routePath, checkedKeys)\r\n        }\r\n\r\n        if (checkedKeys.includes(routePath) || (route.children && route.children.length >= 1)) {\r\n          res.push(route)\r\n        }\r\n      }\r\n      return res\r\n    },\r\n    async confirmRole() {\r\n      const isEdit = this.dialogType === 'edit'\r\n\r\n      const checkedKeys = this.$refs.tree.getCheckedKeys()\r\n      this.role.routes = this.generateTree(deepClone(this.serviceRoutes), '/', checkedKeys)\r\n\r\n      if (isEdit) {\r\n        await updateRole(this.role.key, this.role)\r\n        for (let index = 0; index < this.rolesList.length; index++) {\r\n          if (this.rolesList[index].key === this.role.key) {\r\n            this.rolesList.splice(index, 1, Object.assign({}, this.role))\r\n            break\r\n          }\r\n        }\r\n      } else {\r\n        const { data } = await addRole(this.role)\r\n        this.role.key = data.key\r\n        this.rolesList.push(this.role)\r\n      }\r\n\r\n      const { description, key, name } = this.role\r\n      this.dialogVisible = false\r\n      this.$notify({\r\n        title: 'Success',\r\n        dangerouslyUseHTMLString: true,\r\n        message: `\r\n            <div>Role Key: ${key}</div>\r\n            <div>Role Nmae: ${name}</div>\r\n            <div>Description: ${description}</div>\r\n          `,\r\n        type: 'success'\r\n      })\r\n    },\r\n    // reference: src/view/layout/components/Sidebar/SidebarItem.vue\r\n    onlyOneShowingChild(children = [], parent) {\r\n      let onlyOneChild = null\r\n      const showingChildren = children.filter(item => !item.hidden)\r\n\r\n      // When there is only one child route, the child route is displayed by default\r\n      if (showingChildren.length === 1) {\r\n        onlyOneChild = showingChildren[0]\r\n        onlyOneChild.path = path.resolve(parent.path, onlyOneChild.path)\r\n        return onlyOneChild\r\n      }\r\n\r\n      // Show parent if there are no child route to display\r\n      if (showingChildren.length === 0) {\r\n        onlyOneChild = { ... parent, path: '', noShowingChildren: true }\r\n        return onlyOneChild\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n",null]}