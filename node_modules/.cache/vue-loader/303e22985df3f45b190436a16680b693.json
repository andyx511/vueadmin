{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\views\\excel\\merge-header.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\views\\excel\\merge-header.vue","mtime":1566914132307},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { fetchList } from '@/api/article'\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'MergeHeader',\r\n  data() {\r\n    return {\r\n      list: null,\r\n      listLoading: true,\r\n      downloadLoading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      this.listLoading = true\r\n      fetchList(this.listQuery).then(response => {\r\n        this.list = response.data.items\r\n        this.listLoading = false\r\n      })\r\n    },\r\n    handleDownload() {\r\n      this.downloadLoading = true\r\n        import('@/vendor/Export2Excel').then(excel => {\r\n          const multiHeader = [['Id', 'Main Information', '', '', 'Date']]\r\n          const header = ['', 'Title', 'Author', 'Readings', '']\r\n          const filterVal = ['id', 'title', 'author', 'pageviews', 'display_time']\r\n          const list = this.list\r\n          const data = this.formatJson(filterVal, list)\r\n          const merges = ['A1:A2', 'B1:D1', 'E1:E2']\r\n          excel.export_json_to_excel({\r\n            multiHeader,\r\n            header,\r\n            merges,\r\n            data\r\n          })\r\n          this.downloadLoading = false\r\n        })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        if (j === 'timestamp') {\r\n          return parseTime(v[j])\r\n        } else {\r\n          return v[j]\r\n        }\r\n      }))\r\n    }\r\n  }\r\n}\r\n",null]}