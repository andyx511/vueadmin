{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\views\\components-demo\\count-to.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\views\\components-demo\\count-to.vue","mtime":1566914132276},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport countTo from 'vue-count-to'\r\n\r\nexport default {\r\n  name: 'CountToDemo',\r\n  components: { countTo },\r\n  data() {\r\n    return {\r\n      setStartVal: 0,\r\n      setEndVal: 2017,\r\n      setDuration: 4000,\r\n      setDecimals: 0,\r\n      setSeparator: ',',\r\n      setSuffix: ' rmb',\r\n      setPrefix: 'Â¥ '\r\n    }\r\n  },\r\n  computed: {\r\n    _startVal() {\r\n      if (this.setStartVal) {\r\n        return this.setStartVal\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    _endVal() {\r\n      if (this.setEndVal) {\r\n        return this.setEndVal\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    _duration() {\r\n      if (this.setDuration) {\r\n        return this.setDuration\r\n      } else {\r\n        return 100\r\n      }\r\n    },\r\n    _decimals() {\r\n      if (this.setDecimals) {\r\n        if (this.setDecimals < 0 || this.setDecimals > 20) {\r\n          alert('digits argument must be between 0 and 20')\r\n          return 0\r\n        }\r\n        return this.setDecimals\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    _separator() {\r\n      return this.setSeparator\r\n    },\r\n    _suffix() {\r\n      return this.setSuffix\r\n    },\r\n    _prefix() {\r\n      return this.setPrefix\r\n    }\r\n  },\r\n  methods: {\r\n    start() {\r\n      this.$refs.example.start()\r\n    },\r\n    pauseResume() {\r\n      this.$refs.example.pauseResume()\r\n    }\r\n  }\r\n}\r\n",null]}