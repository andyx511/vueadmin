{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\components\\ImageCropper\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\components\\ImageCropper\\index.vue","mtime":1566914132155},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/* eslint-disable */\r\n'use strict'\r\nimport request from '@/utils/request'\r\nimport language from './utils/language.js'\r\nimport mimes from './utils/mimes.js'\r\nimport data2blob from './utils/data2blob.js'\r\nimport effectRipple from './utils/effectRipple.js'\r\nexport default {\r\n  props: {\r\n    // 域，上传文件name，触发事件会带上（如果一个页面多个图片上传控件，可以做区分\r\n    field: {\r\n      type: String,\r\n      'default': 'avatar'\r\n    },\r\n    // 原名key，类似于id，触发事件会带上（如果一个页面多个图片上传控件，可以做区分\r\n    ki: {\r\n      'default': 0\r\n    },\r\n    // 显示该控件与否\r\n    value: {\r\n      'default': true\r\n    },\r\n    // 上传地址\r\n    url: {\r\n      type: String,\r\n      'default': ''\r\n    },\r\n    // 其他要上传文件附带的数据，对象格式\r\n    params: {\r\n      type: Object,\r\n      'default': null\r\n    },\r\n    // Add custom headers\r\n    headers: {\r\n      type: Object,\r\n      'default': null\r\n    },\r\n    // 剪裁图片的宽\r\n    width: {\r\n      type: Number,\r\n      default: 200\r\n    },\r\n    // 剪裁图片的高\r\n    height: {\r\n      type: Number,\r\n      default: 200\r\n    },\r\n    // 不显示旋转功能\r\n    noRotate: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 不预览圆形图片\r\n    noCircle: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 不预览方形图片\r\n    noSquare: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 单文件大小限制\r\n    maxSize: {\r\n      type: Number,\r\n      'default': 10240\r\n    },\r\n    // 语言类型\r\n    langType: {\r\n      type: String,\r\n      'default': 'zh'\r\n    },\r\n    // 语言包\r\n    langExt: {\r\n      type: Object,\r\n      'default': null\r\n    },\r\n    // 图片上传格式\r\n    imgFormat: {\r\n      type: String,\r\n      'default': 'png'\r\n    },\r\n    // 是否支持跨域\r\n    withCredentials: {\r\n      type: Boolean,\r\n      'default': false\r\n    }\r\n  },\r\n  data() {\r\n    const that = this\r\n    const {\r\n      imgFormat,\r\n      langType,\r\n      langExt,\r\n      width,\r\n      height\r\n    } = that\r\n    let isSupported = true\r\n    const allowImgFormat = [\r\n      'jpg',\r\n      'png'\r\n    ]\r\n    const tempImgFormat = allowImgFormat.indexOf(imgFormat) === -1 ? 'jpg' : imgFormat\r\n    const lang = language[langType] ? language[langType] : language['en']\r\n    const mime = mimes[tempImgFormat]\r\n    // 规范图片格式\r\n    that.imgFormat = tempImgFormat\r\n    if (langExt) {\r\n      Object.assign(lang, langExt)\r\n    }\r\n    if (typeof FormData !== 'function') {\r\n      isSupported = false\r\n    }\r\n    return {\r\n      // 图片的mime\r\n      mime,\r\n      // 语言包\r\n      lang,\r\n      // 浏览器是否支持该控件\r\n      isSupported,\r\n      // 浏览器是否支持触屏事件\r\n      isSupportTouch: document.hasOwnProperty('ontouchstart'),\r\n      // 步骤\r\n      step: 1, // 1选择文件 2剪裁 3上传\r\n      // 上传状态及进度\r\n      loading: 0, // 0未开始 1正在 2成功 3错误\r\n      progress: 0,\r\n      // 是否有错误及错误信息\r\n      hasError: false,\r\n      errorMsg: '',\r\n      // 需求图宽高比\r\n      ratio: width / height,\r\n      // 原图地址、生成图片地址\r\n      sourceImg: null,\r\n      sourceImgUrl: '',\r\n      createImgUrl: '',\r\n      // 原图片拖动事件初始值\r\n      sourceImgMouseDown: {\r\n        on: false,\r\n        mX: 0, // 鼠标按下的坐标\r\n        mY: 0,\r\n        x: 0, // scale原图坐标\r\n        y: 0\r\n      },\r\n      // 生成图片预览的容器大小\r\n      previewContainer: {\r\n        width: 100,\r\n        height: 100\r\n      },\r\n      // 原图容器宽高\r\n      sourceImgContainer: { // sic\r\n        width: 240,\r\n        height: 184 // 如果生成图比例与此一致会出现bug，先改成特殊的格式吧，哈哈哈\r\n      },\r\n      // 原图展示属性\r\n      scale: {\r\n        zoomAddOn: false, // 按钮缩放事件开启\r\n        zoomSubOn: false, // 按钮缩放事件开启\r\n        range: 1, // 最大100\r\n        rotateLeft: false, // 按钮向左旋转事件开启\r\n        rotateRight: false, // 按钮向右旋转事件开启\r\n        degree: 0, // 旋转度数\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0,\r\n        maxWidth: 0,\r\n        maxHeight: 0,\r\n        minWidth: 0, // 最宽\r\n        minHeight: 0,\r\n        naturalWidth: 0, // 原宽\r\n        naturalHeight: 0\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    // 进度条样式\r\n    progressStyle() {\r\n      const {\r\n        progress\r\n      } = this\r\n      return {\r\n        width: progress + '%'\r\n      }\r\n    },\r\n    // 原图样式\r\n    sourceImgStyle() {\r\n      const {\r\n        scale,\r\n        sourceImgMasking\r\n      } = this\r\n      const top = scale.y + sourceImgMasking.y + 'px'\r\n      const left = scale.x + sourceImgMasking.x + 'px'\r\n      return {\r\n        top,\r\n        left,\r\n        width: scale.width + 'px',\r\n        height: scale.height + 'px',\r\n        transform: 'rotate(' + scale.degree + 'deg)', // 旋转时 左侧原始图旋转样式\r\n        '-ms-transform': 'rotate(' + scale.degree + 'deg)', // 兼容IE9\r\n        '-moz-transform': 'rotate(' + scale.degree + 'deg)', // 兼容FireFox\r\n        '-webkit-transform': 'rotate(' + scale.degree + 'deg)', // 兼容Safari 和 chrome\r\n        '-o-transform': 'rotate(' + scale.degree + 'deg)' // 兼容 Opera\r\n      }\r\n    },\r\n    // 原图蒙版属性\r\n    sourceImgMasking() {\r\n      const {\r\n        width,\r\n        height,\r\n        ratio,\r\n        sourceImgContainer\r\n      } = this\r\n      const sic = sourceImgContainer\r\n      const sicRatio = sic.width / sic.height // 原图容器宽高比\r\n      let x = 0\r\n      let y = 0\r\n      let w = sic.width\r\n      let h = sic.height\r\n      let scale = 1\r\n      if (ratio < sicRatio) {\r\n        scale = sic.height / height\r\n        w = sic.height * ratio\r\n        x = (sic.width - w) / 2\r\n      }\r\n      if (ratio > sicRatio) {\r\n        scale = sic.width / width\r\n        h = sic.width / ratio\r\n        y = (sic.height - h) / 2\r\n      }\r\n      return {\r\n        scale, // 蒙版相对需求宽高的缩放\r\n        x,\r\n        y,\r\n        width: w,\r\n        height: h\r\n      }\r\n    },\r\n    // 原图遮罩样式\r\n    sourceImgShadeStyle() {\r\n      const {\r\n        sourceImgMasking,\r\n        sourceImgContainer\r\n      } = this\r\n      const sic = sourceImgContainer\r\n      const sim = sourceImgMasking\r\n      const w = sim.width == sic.width ? sim.width : (sic.width - sim.width) / 2\r\n      const h = sim.height == sic.height ? sim.height : (sic.height - sim.height) / 2\r\n      return {\r\n        width: w + 'px',\r\n        height: h + 'px'\r\n      }\r\n    },\r\n    previewStyle() {\r\n      const {\r\n        width,\r\n        height,\r\n        ratio,\r\n        previewContainer\r\n      } = this\r\n      const pc = previewContainer\r\n      let w = pc.width\r\n      let h = pc.height\r\n      const pcRatio = w / h\r\n      if (ratio < pcRatio) {\r\n        w = pc.height * ratio\r\n      }\r\n      if (ratio > pcRatio) {\r\n        h = pc.width / ratio\r\n      }\r\n      return {\r\n        width: w + 'px',\r\n        height: h + 'px'\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    value(newValue) {\r\n      if (newValue && this.loading != 1) {\r\n        this.reset()\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 点击波纹效果\r\n    ripple(e) {\r\n      effectRipple(e)\r\n    },\r\n    // 关闭控件\r\n    off() {\r\n      setTimeout(() => {\r\n        this.$emit('input', false)\r\n        this.$emit('close')\r\n        if (this.step == 3 && this.loading == 2) {\r\n          this.setStep(1)\r\n        }\r\n      }, 200)\r\n    },\r\n    // 设置步骤\r\n    setStep(no) {\r\n      // 延时是为了显示动画效果呢，哈哈哈\r\n      setTimeout(() => {\r\n        this.step = no\r\n      }, 200)\r\n    },\r\n    /* 图片选择区域函数绑定\r\n     ---------------------------------------------------------------*/\r\n    preventDefault(e) {\r\n      e.preventDefault()\r\n      return false\r\n    },\r\n    handleClick(e) {\r\n      if (this.loading !== 1) {\r\n        if (e.target !== this.$refs.fileinput) {\r\n          e.preventDefault()\r\n          if (document.activeElement !== this.$refs) {\r\n            this.$refs.fileinput.click()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    handleChange(e) {\r\n      e.preventDefault()\r\n      if (this.loading !== 1) {\r\n        const files = e.target.files || e.dataTransfer.files\r\n        this.reset()\r\n        if (this.checkFile(files[0])) {\r\n          this.setSourceImg(files[0])\r\n        }\r\n      }\r\n    },\r\n    /* ---------------------------------------------------------------*/\r\n    // 检测选择的文件是否合适\r\n    checkFile(file) {\r\n      let that = this,\r\n        {\r\n          lang,\r\n          maxSize\r\n        } = that\r\n      // 仅限图片\r\n      if (file.type.indexOf('image') === -1) {\r\n        that.hasError = true\r\n        that.errorMsg = lang.error.onlyImg\r\n        return false\r\n      }\r\n      // 超出大小\r\n      if (file.size / 1024 > maxSize) {\r\n        that.hasError = true\r\n        that.errorMsg = lang.error.outOfSize + maxSize + 'kb'\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n    // 重置控件\r\n    reset() {\r\n      const that = this\r\n      that.loading = 0\r\n      that.hasError = false\r\n      that.errorMsg = ''\r\n      that.progress = 0\r\n    },\r\n    // 设置图片源\r\n    setSourceImg(file) {\r\n      let that = this,\r\n        fr = new FileReader()\r\n      fr.onload = function(e) {\r\n        that.sourceImgUrl = fr.result\r\n        that.startCrop()\r\n      }\r\n      fr.readAsDataURL(file)\r\n    },\r\n    // 剪裁前准备工作\r\n    startCrop() {\r\n      let that = this,\r\n        {\r\n          width,\r\n          height,\r\n          ratio,\r\n          scale,\r\n          sourceImgUrl,\r\n          sourceImgMasking,\r\n          lang\r\n        } = that,\r\n        sim = sourceImgMasking,\r\n        img = new Image()\r\n      img.src = sourceImgUrl\r\n      img.onload = function() {\r\n        let nWidth = img.naturalWidth,\r\n          nHeight = img.naturalHeight,\r\n          nRatio = nWidth / nHeight,\r\n          w = sim.width,\r\n          h = sim.height,\r\n          x = 0,\r\n          y = 0\r\n        // 图片像素不达标\r\n        if (nWidth < width || nHeight < height) {\r\n          that.hasError = true\r\n          that.errorMsg = lang.error.lowestPx + width + '*' + height\r\n          return false\r\n        }\r\n        if (ratio > nRatio) {\r\n          h = w / nRatio\r\n          y = (sim.height - h) / 2\r\n        }\r\n        if (ratio < nRatio) {\r\n          w = h * nRatio\r\n          x = (sim.width - w) / 2\r\n        }\r\n        scale.range = 0\r\n        scale.x = x\r\n        scale.y = y\r\n        scale.width = w\r\n        scale.height = h\r\n        scale.degree = 0\r\n        scale.minWidth = w\r\n        scale.minHeight = h\r\n        scale.maxWidth = nWidth * sim.scale\r\n        scale.maxHeight = nHeight * sim.scale\r\n        scale.naturalWidth = nWidth\r\n        scale.naturalHeight = nHeight\r\n        that.sourceImg = img\r\n        that.createImg()\r\n        that.setStep(2)\r\n      }\r\n    },\r\n    // 鼠标按下图片准备移动\r\n    imgStartMove(e) {\r\n      e.preventDefault()\r\n      // 支持触摸事件，则鼠标事件无效\r\n      if (this.isSupportTouch && !e.targetTouches) {\r\n        return false\r\n      }\r\n      let et = e.targetTouches ? e.targetTouches[0] : e,\r\n        {\r\n          sourceImgMouseDown,\r\n          scale\r\n        } = this,\r\n        simd = sourceImgMouseDown\r\n      simd.mX = et.screenX\r\n      simd.mY = et.screenY\r\n      simd.x = scale.x\r\n      simd.y = scale.y\r\n      simd.on = true\r\n    },\r\n    // 鼠标按下状态下移动，图片移动\r\n    imgMove(e) {\r\n      e.preventDefault()\r\n      // 支持触摸事件，则鼠标事件无效\r\n      if (this.isSupportTouch && !e.targetTouches) {\r\n        return false\r\n      }\r\n      let et = e.targetTouches ? e.targetTouches[0] : e,\r\n        {\r\n          sourceImgMouseDown: {\r\n            on,\r\n            mX,\r\n            mY,\r\n            x,\r\n            y\r\n          },\r\n          scale,\r\n          sourceImgMasking\r\n        } = this,\r\n        sim = sourceImgMasking,\r\n        nX = et.screenX,\r\n        nY = et.screenY,\r\n        dX = nX - mX,\r\n        dY = nY - mY,\r\n        rX = x + dX,\r\n        rY = y + dY\r\n      if (!on) return\r\n      if (rX > 0) {\r\n        rX = 0\r\n      }\r\n      if (rY > 0) {\r\n        rY = 0\r\n      }\r\n      if (rX < sim.width - scale.width) {\r\n        rX = sim.width - scale.width\r\n      }\r\n      if (rY < sim.height - scale.height) {\r\n        rY = sim.height - scale.height\r\n      }\r\n      scale.x = rX\r\n      scale.y = rY\r\n    },\r\n     // 按钮按下开始向右旋转\r\n    startRotateRight(e) {\r\n      let that = this,\r\n        {\r\n          scale\r\n        } = that\r\n      scale.rotateRight = true\r\n      function rotate() {\r\n        if (scale.rotateRight) {\r\n          const degree = ++scale.degree\r\n          that.createImg(degree)\r\n          setTimeout(function() {\r\n            rotate()\r\n          }, 60)\r\n        }\r\n      }\r\n      rotate()\r\n    },\r\n    // 按钮按下开始向右旋转\r\n    startRotateLeft(e) {\r\n      let that = this,\r\n        {\r\n          scale\r\n        } = that\r\n      scale.rotateLeft = true\r\n      function rotate() {\r\n        if (scale.rotateLeft) {\r\n          const degree = --scale.degree\r\n          that.createImg(degree)\r\n          setTimeout(function() {\r\n            rotate()\r\n          }, 60)\r\n        }\r\n      }\r\n      rotate()\r\n    },\r\n    // 停止旋转\r\n    endRotate() {\r\n      const {\r\n        scale\r\n      } = this\r\n      scale.rotateLeft = false\r\n      scale.rotateRight = false\r\n    },\r\n    // 按钮按下开始放大\r\n    startZoomAdd(e) {\r\n      let that = this,\r\n        {\r\n          scale\r\n        } = that\r\n      scale.zoomAddOn = true\r\n      function zoom() {\r\n        if (scale.zoomAddOn) {\r\n          const range = scale.range >= 100 ? 100 : ++scale.range\r\n          that.zoomImg(range)\r\n          setTimeout(function() {\r\n            zoom()\r\n          }, 60)\r\n        }\r\n      }\r\n      zoom()\r\n    },\r\n    // 按钮松开或移开取消放大\r\n    endZoomAdd(e) {\r\n      this.scale.zoomAddOn = false\r\n    },\r\n    // 按钮按下开始缩小\r\n    startZoomSub(e) {\r\n      let that = this,\r\n        {\r\n          scale\r\n        } = that\r\n      scale.zoomSubOn = true\r\n      function zoom() {\r\n        if (scale.zoomSubOn) {\r\n          const range = scale.range <= 0 ? 0 : --scale.range\r\n          that.zoomImg(range)\r\n          setTimeout(function() {\r\n            zoom()\r\n          }, 60)\r\n        }\r\n      }\r\n      zoom()\r\n    },\r\n    // 按钮松开或移开取消缩小\r\n    endZoomSub(e) {\r\n      const {\r\n        scale\r\n      } = this\r\n      scale.zoomSubOn = false\r\n    },\r\n    zoomChange(e) {\r\n      this.zoomImg(e.target.value)\r\n    },\r\n    // 缩放原图\r\n    zoomImg(newRange) {\r\n      const that = this\r\n      const {\r\n        sourceImgMasking,\r\n        sourceImgMouseDown,\r\n        scale\r\n      } = this\r\n      const {\r\n        maxWidth,\r\n        maxHeight,\r\n        minWidth,\r\n        minHeight,\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        range\r\n      } = scale\r\n      const sim = sourceImgMasking\r\n      // 蒙版宽高\r\n      const sWidth = sim.width\r\n      const sHeight = sim.height\r\n      // 新宽高\r\n      const nWidth = minWidth + (maxWidth - minWidth) * newRange / 100\r\n      const nHeight = minHeight + (maxHeight - minHeight) * newRange / 100\r\n      // 新坐标（根据蒙版中心点缩放）\r\n      let nX = sWidth / 2 - (nWidth / width) * (sWidth / 2 - x)\r\n      let nY = sHeight / 2 - (nHeight / height) * (sHeight / 2 - y)\r\n      // 判断新坐标是否超过蒙版限制\r\n      if (nX > 0) {\r\n        nX = 0\r\n      }\r\n      if (nY > 0) {\r\n        nY = 0\r\n      }\r\n      if (nX < sWidth - nWidth) {\r\n        nX = sWidth - nWidth\r\n      }\r\n      if (nY < sHeight - nHeight) {\r\n        nY = sHeight - nHeight\r\n      }\r\n      // 赋值处理\r\n      scale.x = nX\r\n      scale.y = nY\r\n      scale.width = nWidth\r\n      scale.height = nHeight\r\n      scale.range = newRange\r\n      setTimeout(function() {\r\n        if (scale.range == newRange) {\r\n          that.createImg()\r\n        }\r\n      }, 300)\r\n    },\r\n     // 生成需求图片\r\n    createImg(e) {\r\n      let that = this,\r\n        {\r\n          mime,\r\n          sourceImg,\r\n          scale: {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            degree\r\n          },\r\n          sourceImgMasking: {\r\n            scale\r\n          }\r\n        } = that,\r\n        canvas = that.$refs.canvas,\r\n        ctx = canvas.getContext('2d')\r\n      if (e) {\r\n        // 取消鼠标按下移动状态\r\n        that.sourceImgMouseDown.on = false\r\n      }\r\n      canvas.width = that.width\r\n      canvas.height = that.height\r\n      ctx.clearRect(0, 0, that.width, that.height)\r\n      // 将透明区域设置为白色底边\r\n      ctx.fillStyle = '#fff'\r\n      ctx.fillRect(0, 0, that.width, that.height)\r\n      ctx.translate(that.width * 0.5, that.height * 0.5)\r\n      ctx.rotate(Math.PI * degree / 180)\r\n      ctx.translate(-that.width * 0.5, -that.height * 0.5)\r\n      ctx.drawImage(sourceImg, x / scale, y / scale, width / scale, height / scale)\r\n      that.createImgUrl = canvas.toDataURL(mime)\r\n    },\r\n    prepareUpload() {\r\n      const {\r\n        url,\r\n        createImgUrl,\r\n        field,\r\n        ki\r\n      } = this\r\n      this.$emit('crop-success', createImgUrl, field, ki)\r\n      if (typeof url === 'string' && url) {\r\n        this.upload()\r\n      } else {\r\n        this.off()\r\n      }\r\n    },\r\n    // 上传图片\r\n    upload() {\r\n      let that = this,\r\n        {\r\n          lang,\r\n          imgFormat,\r\n          mime,\r\n          url,\r\n          params,\r\n          headers,\r\n          field,\r\n          ki,\r\n          createImgUrl,\r\n          withCredentials\r\n        } = this,\r\n        fmData = new FormData()\r\n      fmData.append(field, data2blob(createImgUrl, mime), field + '.' + imgFormat)\r\n      // 添加其他参数\r\n      if (typeof params === 'object' && params) {\r\n        Object.keys(params).forEach((k) => {\r\n          fmData.append(k, params[k])\r\n        })\r\n      }\r\n      // 监听进度回调\r\n      const uploadProgress = function(event) {\r\n        if (event.lengthComputable) {\r\n          that.progress = 100 * Math.round(event.loaded) / event.total\r\n        }\r\n      }\r\n      // 上传文件\r\n      that.reset()\r\n      that.loading = 1\r\n      that.setStep(3)\r\n      request({\r\n        url,\r\n        method: 'post',\r\n        data: fmData\r\n      }).then(resData => {\r\n        that.loading = 2\r\n        that.$emit('crop-upload-success', resData.data)\r\n      }).catch(err => {\r\n        if (that.value) {\r\n          that.loading = 3\r\n          that.hasError = true\r\n          that.errorMsg = lang.fail\r\n          that.$emit('crop-upload-fail', err, field, ki)\r\n        }\r\n      })\r\n    },\r\n    closeHandler(e) {\r\n      if (this.value && (e.key == 'Escape' || e.keyCode == 27)) {\r\n        this.off()\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // 绑定按键esc隐藏此插件事件\r\n    document.addEventListener('keyup', this.closeHandler)\r\n  },\r\n  destroyed() {\r\n    document.removeEventListener('keyup', this.closeHandler)\r\n  },\r\n}\r\n",null]}