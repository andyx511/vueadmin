{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\VUE\\vue-element-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\VUE\\vue-element-admin\\src\\store\\modules\\tagsView.js","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\store\\modules\\tagsView.js","mtime":1566914132252},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/slicedToArray\"));\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar state = {\n  visitedViews: [],\n  cachedViews: []\n};\nvar mutations = {\n  ADD_VISITED_VIEW: function ADD_VISITED_VIEW(state, view) {\n    if (state.visitedViews.some(function (v) {\n      return v.path === view.path;\n    })) return;\n    state.visitedViews.push(Object.assign({}, view, {\n      title: view.meta.title || 'no-name'\n    }));\n  },\n  ADD_CACHED_VIEW: function ADD_CACHED_VIEW(state, view) {\n    if (state.cachedViews.includes(view.name)) return;\n\n    if (!view.meta.noCache) {\n      state.cachedViews.push(view.name);\n    }\n  },\n  DEL_VISITED_VIEW: function DEL_VISITED_VIEW(state, view) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = state.visitedViews.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _step$value = (0, _slicedToArray2.default)(_step.value, 2),\n            i = _step$value[0],\n            v = _step$value[1];\n\n        if (v.path === view.path) {\n          state.visitedViews.splice(i, 1);\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  },\n  DEL_CACHED_VIEW: function DEL_CACHED_VIEW(state, view) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = state.cachedViews[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var i = _step2.value;\n\n        if (i === view.name) {\n          var index = state.cachedViews.indexOf(i);\n          state.cachedViews.splice(index, 1);\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  },\n  DEL_OTHERS_VISITED_VIEWS: function DEL_OTHERS_VISITED_VIEWS(state, view) {\n    state.visitedViews = state.visitedViews.filter(function (v) {\n      return v.meta.affix || v.path === view.path;\n    });\n  },\n  DEL_OTHERS_CACHED_VIEWS: function DEL_OTHERS_CACHED_VIEWS(state, view) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = state.cachedViews[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var i = _step3.value;\n\n        if (i === view.name) {\n          var index = state.cachedViews.indexOf(i);\n          state.cachedViews = state.cachedViews.slice(index, index + 1);\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  },\n  DEL_ALL_VISITED_VIEWS: function DEL_ALL_VISITED_VIEWS(state) {\n    // keep affix tags\n    var affixTags = state.visitedViews.filter(function (tag) {\n      return tag.meta.affix;\n    });\n    state.visitedViews = affixTags;\n  },\n  DEL_ALL_CACHED_VIEWS: function DEL_ALL_CACHED_VIEWS(state) {\n    state.cachedViews = [];\n  },\n  UPDATE_VISITED_VIEW: function UPDATE_VISITED_VIEW(state, view) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = state.visitedViews[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var v = _step4.value;\n\n        if (v.path === view.path) {\n          v = Object.assign(v, view);\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  }\n};\nvar actions = {\n  addView: function addView(_ref, view) {\n    var dispatch = _ref.dispatch;\n    dispatch('addVisitedView', view);\n    dispatch('addCachedView', view);\n  },\n  addVisitedView: function addVisitedView(_ref2, view) {\n    var commit = _ref2.commit;\n    commit('ADD_VISITED_VIEW', view);\n  },\n  addCachedView: function addCachedView(_ref3, view) {\n    var commit = _ref3.commit;\n    commit('ADD_CACHED_VIEW', view);\n  },\n  delView: function delView(_ref4, view) {\n    var dispatch = _ref4.dispatch,\n        state = _ref4.state;\n    return new Promise(function (resolve) {\n      dispatch('delVisitedView', view);\n      dispatch('delCachedView', view);\n      resolve({\n        visitedViews: (0, _toConsumableArray2.default)(state.visitedViews),\n        cachedViews: (0, _toConsumableArray2.default)(state.cachedViews)\n      });\n    });\n  },\n  delVisitedView: function delVisitedView(_ref5, view) {\n    var commit = _ref5.commit,\n        state = _ref5.state;\n    return new Promise(function (resolve) {\n      commit('DEL_VISITED_VIEW', view);\n      resolve((0, _toConsumableArray2.default)(state.visitedViews));\n    });\n  },\n  delCachedView: function delCachedView(_ref6, view) {\n    var commit = _ref6.commit,\n        state = _ref6.state;\n    return new Promise(function (resolve) {\n      commit('DEL_CACHED_VIEW', view);\n      resolve((0, _toConsumableArray2.default)(state.cachedViews));\n    });\n  },\n  delOthersViews: function delOthersViews(_ref7, view) {\n    var dispatch = _ref7.dispatch,\n        state = _ref7.state;\n    return new Promise(function (resolve) {\n      dispatch('delOthersVisitedViews', view);\n      dispatch('delOthersCachedViews', view);\n      resolve({\n        visitedViews: (0, _toConsumableArray2.default)(state.visitedViews),\n        cachedViews: (0, _toConsumableArray2.default)(state.cachedViews)\n      });\n    });\n  },\n  delOthersVisitedViews: function delOthersVisitedViews(_ref8, view) {\n    var commit = _ref8.commit,\n        state = _ref8.state;\n    return new Promise(function (resolve) {\n      commit('DEL_OTHERS_VISITED_VIEWS', view);\n      resolve((0, _toConsumableArray2.default)(state.visitedViews));\n    });\n  },\n  delOthersCachedViews: function delOthersCachedViews(_ref9, view) {\n    var commit = _ref9.commit,\n        state = _ref9.state;\n    return new Promise(function (resolve) {\n      commit('DEL_OTHERS_CACHED_VIEWS', view);\n      resolve((0, _toConsumableArray2.default)(state.cachedViews));\n    });\n  },\n  delAllViews: function delAllViews(_ref10, view) {\n    var dispatch = _ref10.dispatch,\n        state = _ref10.state;\n    return new Promise(function (resolve) {\n      dispatch('delAllVisitedViews', view);\n      dispatch('delAllCachedViews', view);\n      resolve({\n        visitedViews: (0, _toConsumableArray2.default)(state.visitedViews),\n        cachedViews: (0, _toConsumableArray2.default)(state.cachedViews)\n      });\n    });\n  },\n  delAllVisitedViews: function delAllVisitedViews(_ref11) {\n    var commit = _ref11.commit,\n        state = _ref11.state;\n    return new Promise(function (resolve) {\n      commit('DEL_ALL_VISITED_VIEWS');\n      resolve((0, _toConsumableArray2.default)(state.visitedViews));\n    });\n  },\n  delAllCachedViews: function delAllCachedViews(_ref12) {\n    var commit = _ref12.commit,\n        state = _ref12.state;\n    return new Promise(function (resolve) {\n      commit('DEL_ALL_CACHED_VIEWS');\n      resolve((0, _toConsumableArray2.default)(state.cachedViews));\n    });\n  },\n  updateVisitedView: function updateVisitedView(_ref13, view) {\n    var commit = _ref13.commit;\n    commit('UPDATE_VISITED_VIEW', view);\n  }\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",null]}