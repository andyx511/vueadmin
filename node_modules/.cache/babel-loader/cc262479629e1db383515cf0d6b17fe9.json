{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\VUE\\vue-element-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\VUE\\vue-element-admin\\src\\directive\\clipboard\\clipboard.js","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\directive\\clipboard\\clipboard.js","mtime":1566914132190},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Inspired by https://github.com/Inndy/vue-clipboard2\nvar Clipboard = require('clipboard');\n\nif (!Clipboard) {\n  throw new Error('you should npm install `clipboard` --save at first ');\n}\n\nvar _default = {\n  bind: function bind(el, binding) {\n    if (binding.arg === 'success') {\n      el._v_clipboard_success = binding.value;\n    } else if (binding.arg === 'error') {\n      el._v_clipboard_error = binding.value;\n    } else {\n      var clipboard = new Clipboard(el, {\n        text: function text() {\n          return binding.value;\n        },\n        action: function action() {\n          return binding.arg === 'cut' ? 'cut' : 'copy';\n        }\n      });\n      clipboard.on('success', function (e) {\n        var callback = el._v_clipboard_success;\n        callback && callback(e); // eslint-disable-line\n      });\n      clipboard.on('error', function (e) {\n        var callback = el._v_clipboard_error;\n        callback && callback(e); // eslint-disable-line\n      });\n      el._v_clipboard = clipboard;\n    }\n  },\n  update: function update(el, binding) {\n    if (binding.arg === 'success') {\n      el._v_clipboard_success = binding.value;\n    } else if (binding.arg === 'error') {\n      el._v_clipboard_error = binding.value;\n    } else {\n      el._v_clipboard.text = function () {\n        return binding.value;\n      };\n\n      el._v_clipboard.action = function () {\n        return binding.arg === 'cut' ? 'cut' : 'copy';\n      };\n    }\n  },\n  unbind: function unbind(el, binding) {\n    if (binding.arg === 'success') {\n      delete el._v_clipboard_success;\n    } else if (binding.arg === 'error') {\n      delete el._v_clipboard_error;\n    } else {\n      el._v_clipboard.destroy();\n\n      delete el._v_clipboard;\n    }\n  }\n};\nexports.default = _default;",null]}