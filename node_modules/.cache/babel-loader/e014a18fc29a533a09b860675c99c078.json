{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\vue-element-admin\\src\\views\\permission\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\src\\views\\permission\\role.vue","mtime":1566914132328},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _utils = require(\"@/utils\");\n\nvar _role = require(\"@/api/role\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar defaultRole = {\n  key: '',\n  name: '',\n  description: '',\n  routes: []\n};\nvar _default = {\n  data: function data() {\n    return {\n      role: Object.assign({}, defaultRole),\n      routes: [],\n      rolesList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      }\n    };\n  },\n  computed: {\n    routesData: function routesData() {\n      return this.routes;\n    }\n  },\n  created: function created() {\n    // Mock: get all routes and roles list from server\n    this.getRoutes();\n    this.getRoles();\n  },\n  methods: {\n    getRoutes: function () {\n      var _getRoutes2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _role.getRoutes)();\n\n              case 2:\n                res = _context.sent;\n                this.serviceRoutes = res.data;\n                this.routes = this.generateRoutes(res.data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRoutes() {\n        return _getRoutes2.apply(this, arguments);\n      }\n\n      return getRoutes;\n    }(),\n    getRoles: function () {\n      var _getRoles2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _role.getRoles)();\n\n              case 2:\n                res = _context2.sent;\n                this.rolesList = res.data;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRoles() {\n        return _getRoles2.apply(this, arguments);\n      }\n\n      return getRoles;\n    }(),\n    // Reshape the routes structure so that it looks the same as the sidebar\n    generateRoutes: function generateRoutes(routes) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';\n      var res = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = routes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var route = _step.value;\n\n          // skip some route\n          if (route.hidden) {\n            continue;\n          }\n\n          var onlyOneShowingChild = this.onlyOneShowingChild(route.children, route);\n\n          if (route.children && onlyOneShowingChild && !route.alwaysShow) {\n            route = onlyOneShowingChild;\n          }\n\n          var data = {\n            path: _path.default.resolve(basePath, route.path),\n            title: route.meta && route.meta.title // recursive child routes\n\n          };\n\n          if (route.children) {\n            data.children = this.generateRoutes(route.children, data.path);\n          }\n\n          res.push(data);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return res;\n    },\n    generateArr: function generateArr(routes) {\n      var _this = this;\n\n      var data = [];\n      routes.forEach(function (route) {\n        data.push(route);\n\n        if (route.children) {\n          var temp = _this.generateArr(route.children);\n\n          if (temp.length > 0) {\n            data = [].concat((0, _toConsumableArray2.default)(data), (0, _toConsumableArray2.default)(temp));\n          }\n        }\n      });\n      return data;\n    },\n    handleAddRole: function handleAddRole() {\n      this.role = Object.assign({}, defaultRole);\n\n      if (this.$refs.tree) {\n        this.$refs.tree.setCheckedNodes([]);\n      }\n\n      this.dialogType = 'new';\n      this.dialogVisible = true;\n    },\n    handleEdit: function handleEdit(scope) {\n      var _this2 = this;\n\n      this.dialogType = 'edit';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.role = (0, _utils.deepClone)(scope.row);\n      this.$nextTick(function () {\n        var routes = _this2.generateRoutes(_this2.role.routes);\n\n        _this2.$refs.tree.setCheckedNodes(_this2.generateArr(routes)); // set checked state of a node not affects its father and child nodes\n\n\n        _this2.checkStrictly = false;\n      });\n    },\n    handleDelete: function handleDelete(_ref) {\n      var _this3 = this;\n\n      var $index = _ref.$index,\n          row = _ref.row;\n      this.$confirm('Confirm to remove the role?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _role.deleteRole)(row.key);\n\n              case 2:\n                _this3.rolesList.splice($index, 1);\n\n                _this3.$message({\n                  type: 'success',\n                  message: 'Delete succed!'\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    generateTree: function generateTree(routes) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';\n      var checkedKeys = arguments.length > 2 ? arguments[2] : undefined;\n      var res = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = routes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var route = _step2.value;\n\n          var routePath = _path.default.resolve(basePath, route.path); // recursive child routes\n\n\n          if (route.children) {\n            route.children = this.generateTree(route.children, routePath, checkedKeys);\n          }\n\n          if (checkedKeys.includes(routePath) || route.children && route.children.length >= 1) {\n            res.push(route);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return res;\n    },\n    confirmRole: function () {\n      var _confirmRole = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var isEdit, checkedKeys, index, _ref3, data, _this$role, description, key, name;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                isEdit = this.dialogType === 'edit';\n                checkedKeys = this.$refs.tree.getCheckedKeys();\n                this.role.routes = this.generateTree((0, _utils.deepClone)(this.serviceRoutes), '/', checkedKeys);\n\n                if (!isEdit) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.next = 6;\n                return (0, _role.updateRole)(this.role.key, this.role);\n\n              case 6:\n                index = 0;\n\n              case 7:\n                if (!(index < this.rolesList.length)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                if (!(this.rolesList[index].key === this.role.key)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                this.rolesList.splice(index, 1, Object.assign({}, this.role));\n                return _context4.abrupt(\"break\", 14);\n\n              case 11:\n                index++;\n                _context4.next = 7;\n                break;\n\n              case 14:\n                _context4.next = 22;\n                break;\n\n              case 16:\n                _context4.next = 18;\n                return (0, _role.addRole)(this.role);\n\n              case 18:\n                _ref3 = _context4.sent;\n                data = _ref3.data;\n                this.role.key = data.key;\n                this.rolesList.push(this.role);\n\n              case 22:\n                _this$role = this.role, description = _this$role.description, key = _this$role.key, name = _this$role.name;\n                this.dialogVisible = false;\n                this.$notify({\n                  title: 'Success',\n                  dangerouslyUseHTMLString: true,\n                  message: \"\\n            <div>Role Key: \".concat(key, \"</div>\\n            <div>Role Nmae: \").concat(name, \"</div>\\n            <div>Description: \").concat(description, \"</div>\\n          \"),\n                  type: 'success'\n                });\n\n              case 25:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function confirmRole() {\n        return _confirmRole.apply(this, arguments);\n      }\n\n      return confirmRole;\n    }(),\n    // reference: src/view/layout/components/Sidebar/SidebarItem.vue\n    onlyOneShowingChild: function onlyOneShowingChild() {\n      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var parent = arguments.length > 1 ? arguments[1] : undefined;\n      var onlyOneChild = null;\n      var showingChildren = children.filter(function (item) {\n        return !item.hidden;\n      }); // When there is only one child route, the child route is displayed by default\n\n      if (showingChildren.length === 1) {\n        onlyOneChild = showingChildren[0];\n        onlyOneChild.path = _path.default.resolve(parent.path, onlyOneChild.path);\n        return onlyOneChild;\n      } // Show parent if there are no child route to display\n\n\n      if (showingChildren.length === 0) {\n        onlyOneChild = (0, _objectSpread2.default)({}, parent, {\n          path: '',\n          noShowingChildren: true\n        });\n        return onlyOneChild;\n      }\n\n      return false;\n    }\n  }\n};\nexports.default = _default;",null]}