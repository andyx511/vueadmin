{"remainingRequest":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\VUE\\vue-element-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\VUE\\vue-element-admin\\mock\\index.js","dependencies":[{"path":"E:\\VUE\\vue-element-admin\\mock\\index.js","mtime":1568388280683},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\VUE\\vue-element-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mockXHR = mockXHR;\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"E:\\\\VUE\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/toConsumableArray\"));\n\nvar _mockjs = _interopRequireDefault(require(\"mockjs\"));\n\nvar _utils = require(\"../src/utils\");\n\nvar _user = _interopRequireDefault(require(\"./user\"));\n\nvar _role = _interopRequireDefault(require(\"./role\"));\n\nvar _article = _interopRequireDefault(require(\"./article\"));\n\nvar _remoteSearch = _interopRequireDefault(require(\"./remote-search\"));\n\nvar mocks = [].concat((0, _toConsumableArray2.default)(_user.default), (0, _toConsumableArray2.default)(_role.default), (0, _toConsumableArray2.default)(_article.default), (0, _toConsumableArray2.default)(_remoteSearch.default)); // for front mock\n// please use it cautiously, it will redefine XMLHttpRequest,\n// which will cause many of your third-party libraries to be invalidated(like progress event).\n\nfunction mockXHR() {\n  // mock patch\n  // https://github.com/nuysoft/Mock/issues/300\n  _mockjs.default.XHR.prototype.proxy_send = _mockjs.default.XHR.prototype.send;\n\n  _mockjs.default.XHR.prototype.send = function () {\n    if (this.custom.xhr) {\n      this.custom.xhr.withCredentials = this.withCredentials || false;\n\n      if (this.responseType) {\n        this.custom.xhr.responseType = this.responseType;\n      }\n    }\n\n    this.proxy_send.apply(this, arguments);\n  };\n\n  function XHR2ExpressReqWrap(respond) {\n    return function (options) {\n      var result = null;\n\n      if (respond instanceof Function) {\n        var body = options.body,\n            type = options.type,\n            url = options.url; // https://expressjs.com/en/4x/api.html#req\n\n        result = respond({\n          method: type,\n          body: JSON.parse(body),\n          query: (0, _utils.param2Obj)(url)\n        });\n      } else {\n        result = respond;\n      }\n\n      return _mockjs.default.mock(result);\n    };\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = mocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var i = _step.value;\n\n      _mockjs.default.mock(new RegExp(i.url), i.type || 'get', XHR2ExpressReqWrap(i.response));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n} // for mock server\n\n\nvar responseFake = function responseFake(url, type, respond) {\n  return {\n    url: new RegExp(\"/mock\".concat(url)),\n    type: type || 'get',\n    response: function response(req, res) {\n      res.json(_mockjs.default.mock(respond instanceof Function ? respond(req, res) : respond));\n    }\n  };\n};\n\nvar _default = mocks.map(function (route) {\n  return responseFake(route.url, route.type, route.response);\n});\n\nexports.default = _default;",null]}